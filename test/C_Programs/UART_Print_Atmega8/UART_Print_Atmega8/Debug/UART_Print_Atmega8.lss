
UART_Print_Atmega8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000003a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012a  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  00000159  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000007e5  00000000  00000000  00000179  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000517  00000000  00000000  0000095e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002e0  00000000  00000000  00000e75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00001158  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000017a  00000000  00000000  0000117c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  000012f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .text         00000002  000000d4  000000d4  00000128  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001308  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .text.main    0000009a  0000003a  0000003a  0000008e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	68 c0       	rjmp	.+208    	; 0xd4 <__bad_interrupt>
   4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
   6:	66 c0       	rjmp	.+204    	; 0xd4 <__bad_interrupt>
   8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
   a:	64 c0       	rjmp	.+200    	; 0xd4 <__bad_interrupt>
   c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
   e:	62 c0       	rjmp	.+196    	; 0xd4 <__bad_interrupt>
  10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
  12:	60 c0       	rjmp	.+192    	; 0xd4 <__bad_interrupt>
  14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
  16:	5e c0       	rjmp	.+188    	; 0xd4 <__bad_interrupt>
  18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
  1a:	5c c0       	rjmp	.+184    	; 0xd4 <__bad_interrupt>
  1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
  1e:	5a c0       	rjmp	.+180    	; 0xd4 <__bad_interrupt>
  20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
  22:	58 c0       	rjmp	.+176    	; 0xd4 <__bad_interrupt>
  24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	03 d0       	rcall	.+6      	; 0x3a <_etext>
  34:	00 c0       	rjmp	.+0      	; 0x36 <_exit>

00000036 <_exit>:
  36:	f8 94       	cli

00000038 <__stop_program>:
  38:	ff cf       	rjmp	.-2      	; 0x38 <__stop_program>

Disassembly of section .text:

000000d4 <__bad_interrupt>:
  d4:	95 cf       	rjmp	.-214    	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

0000003a <main>:
	//	PORTD |= 1 << PIND0;

	// https://cache.amobbs.com/bbs_upload782111/files_22/ourdev_508497.html
	unsigned int ubbrValue = 51;//AS described before setting baud rate 9600baud(BPS)
	//Put the upper part of the baud number here (bits 8 to 11)
	UBRRH = (unsigned char) (ubbrValue >> 8);
  3a:	10 bc       	out	0x20, r1	; 32
	//Put the remaining part of the baud number here
	UBRRL = (unsigned char) ubbrValue;
  3c:	83 e3       	ldi	r24, 0x33	; 51
  3e:	89 b9       	out	0x09, r24	; 9
	//Enable the receiver and transmitter
	UCSRB = (1 << RXEN) | (1 << TXEN);
  40:	88 e1       	ldi	r24, 0x18	; 24
  42:	8a b9       	out	0x0a, r24	; 10
	//Set 2 stop bits and data bit length is 8-bit
	UCSRC = (1<<URSEL) | (1 << USBS) | (3 << UCSZ0);		//Different (added URSEL part)
  44:	8e e8       	ldi	r24, 0x8E	; 142
  46:	80 bd       	out	0x20, r24	; 32

	while (1)	{
			while (! (UCSRA & (1 << UDRE)) );
  48:	5d 9b       	sbis	0x0b, 5	; 11
  4a:	fe cf       	rjmp	.-4      	; 0x48 <__SREG__+0x9>
			UDR = 0b10110100;//once transmitter is ready sent eight bit data // b4
  4c:	84 eb       	ldi	r24, 0xB4	; 180
  4e:	8c b9       	out	0x0c, r24	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  50:	2f ef       	ldi	r18, 0xFF	; 255
  52:	80 e7       	ldi	r24, 0x70	; 112
  54:	92 e0       	ldi	r25, 0x02	; 2
  56:	21 50       	subi	r18, 0x01	; 1
  58:	80 40       	sbci	r24, 0x00	; 0
  5a:	90 40       	sbci	r25, 0x00	; 0
  5c:	e1 f7       	brne	.-8      	; 0x56 <__SREG__+0x17>
  5e:	00 c0       	rjmp	.+0      	; 0x60 <__SREG__+0x21>
  60:	00 00       	nop
			_delay_ms(100);
			while (! (UCSRA & (1 << UDRE)) );
  62:	5d 9b       	sbis	0x0b, 5	; 11
  64:	fe cf       	rjmp	.-4      	; 0x62 <__SREG__+0x23>
			UDR = 0b00011100; // 1C
  66:	8c e1       	ldi	r24, 0x1C	; 28
  68:	8c b9       	out	0x0c, r24	; 12
			while (! (UCSRA & (1 << UDRE)) );
  6a:	5d 9b       	sbis	0x0b, 5	; 11
  6c:	fe cf       	rjmp	.-4      	; 0x6a <__SREG__+0x2b>
			UDR = 's'; // 1C
  6e:	83 e7       	ldi	r24, 0x73	; 115
  70:	8c b9       	out	0x0c, r24	; 12
			while (! (UCSRA & (1 << UDRE)) );
  72:	5d 9b       	sbis	0x0b, 5	; 11
  74:	fe cf       	rjmp	.-4      	; 0x72 <__SREG__+0x33>
			UDR = 'e'; // 1C
  76:	85 e6       	ldi	r24, 0x65	; 101
  78:	8c b9       	out	0x0c, r24	; 12
			while (! (UCSRA & (1 << UDRE)) );
  7a:	5d 9b       	sbis	0x0b, 5	; 11
  7c:	fe cf       	rjmp	.-4      	; 0x7a <__SREG__+0x3b>
			UDR = 'n'; // 1C
  7e:	8e e6       	ldi	r24, 0x6E	; 110
  80:	8c b9       	out	0x0c, r24	; 12
			while (! (UCSRA & (1 << UDRE)) );
  82:	5d 9b       	sbis	0x0b, 5	; 11
  84:	fe cf       	rjmp	.-4      	; 0x82 <__SREG__+0x43>
			UDR = 'i'; // 1C
  86:	89 e6       	ldi	r24, 0x69	; 105
  88:	8c b9       	out	0x0c, r24	; 12
			while (! (UCSRA & (1 << UDRE)) );
  8a:	5d 9b       	sbis	0x0b, 5	; 11
  8c:	fe cf       	rjmp	.-4      	; 0x8a <__SREG__+0x4b>
			UDR = 'o'; // 1C
  8e:	8f e6       	ldi	r24, 0x6F	; 111
  90:	8c b9       	out	0x0c, r24	; 12
			while (! (UCSRA & (1 << UDRE)) );
  92:	5d 9b       	sbis	0x0b, 5	; 11
  94:	fe cf       	rjmp	.-4      	; 0x92 <__SREG__+0x53>
			UDR = 'r'; // 1C
  96:	82 e7       	ldi	r24, 0x72	; 114
  98:	8c b9       	out	0x0c, r24	; 12
			while (! (UCSRA & (1 << UDRE)) );
  9a:	5d 9b       	sbis	0x0b, 5	; 11
  9c:	fe cf       	rjmp	.-4      	; 0x9a <__SREG__+0x5b>
			UDR = ' '; // 1C
  9e:	80 e2       	ldi	r24, 0x20	; 32
  a0:	8c b9       	out	0x0c, r24	; 12
			while (! (UCSRA & (1 << UDRE)) );
  a2:	5d 9b       	sbis	0x0b, 5	; 11
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <__SREG__+0x63>
			UDR = 'd'; // 1C
  a6:	84 e6       	ldi	r24, 0x64	; 100
  a8:	8c b9       	out	0x0c, r24	; 12
			while (! (UCSRA & (1 << UDRE)) );
  aa:	5d 9b       	sbis	0x0b, 5	; 11
  ac:	fe cf       	rjmp	.-4      	; 0xaa <__SREG__+0x6b>
			UDR = 'e'; // 1C
  ae:	85 e6       	ldi	r24, 0x65	; 101
  b0:	8c b9       	out	0x0c, r24	; 12
			while (! (UCSRA & (1 << UDRE)) );
  b2:	5d 9b       	sbis	0x0b, 5	; 11
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <__SREG__+0x73>
			UDR = 's'; // 1C
  b6:	83 e7       	ldi	r24, 0x73	; 115
  b8:	8c b9       	out	0x0c, r24	; 12
			while (! (UCSRA & (1 << UDRE)) );
  ba:	5d 9b       	sbis	0x0b, 5	; 11
  bc:	fe cf       	rjmp	.-4      	; 0xba <__SREG__+0x7b>
			UDR = 'i'; // 1C
  be:	89 e6       	ldi	r24, 0x69	; 105
  c0:	8c b9       	out	0x0c, r24	; 12
			while (! (UCSRA & (1 << UDRE)) );
  c2:	5d 9b       	sbis	0x0b, 5	; 11
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <__SREG__+0x83>
			UDR = 'g'; // 1C
  c6:	87 e6       	ldi	r24, 0x67	; 103
  c8:	8c b9       	out	0x0c, r24	; 12
			while (! (UCSRA & (1 << UDRE)) );
  ca:	5d 9b       	sbis	0x0b, 5	; 11
  cc:	fe cf       	rjmp	.-4      	; 0xca <__SREG__+0x8b>
			UDR = 'n'; // 1C
  ce:	8e e6       	ldi	r24, 0x6E	; 110
  d0:	8c b9       	out	0x0c, r24	; 12
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__SREG__+0x93>
